<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.14">
  <compounddef id="_matrix_8h" kind="file" language="C++">
    <compoundname>Matrix.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="0">
        <label>Matrix.h</label>
        <link refid="_matrix_8h"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>vector</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
    </incdepgraph>
    <innerclass refid="classmatrix" prot="public">matrix</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_matrix_8h_1a80c0944640e62d3ed6c5419c1bcc0c88" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int X</definition>
        <argsstring></argsstring>
        <name>X</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="3" column="1" bodyfile="Matrix.h" bodystart="3" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8h_1aa482c4cc86a24474e4fb19b5b5978778" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int Y</definition>
        <argsstring></argsstring>
        <name>Y</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="4" column="1" bodyfile="Matrix.h" bodystart="4" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_matrix_8h_1a624617cbff465dbf111c97cef22bd79e" prot="private" static="no" mutable="no">
        <type>vector&lt; vector&lt; type &gt; &gt;</type>
        <definition>vector&lt; vector&lt; type &gt; &gt; mat</definition>
        <argsstring></argsstring>
        <name>mat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="5" column="1" bodyfile="Matrix.h" bodystart="5" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_matrix_8h_1a3597ec872c96377b68901a067b9efc53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class type</type>
          </param>
        </templateparamlist>
        <type>class <ref refid="classmatrix" kindref="compound">matrix</ref></type>
        <definition>class matrix PrintFormat</definition>
        <argsstring>()</argsstring>
        <name>PrintFormat</name>
        <briefdescription>
<para>按矩阵格式输出 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="1" column="1" bodyfile="Matrix.h" bodystart="44" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a76896e68cbfa7849ff0d6c7d257ad4ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PutArray</definition>
        <argsstring>(type **Array, int Row, int Column)</argsstring>
        <name>PutArray</name>
        <param>
          <type>type **</type>
          <declname>Array</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Column</declname>
        </param>
        <briefdescription>
<para>将二维数组转化为矩阵 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Array</parametername>
</parameternamelist>
<parameterdescription>
<para>一个二维数组的指针 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Row</parametername>
</parameternamelist>
<parameterdescription>
<para>二维数组的行数 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Column</parametername>
</parameternamelist>
<parameterdescription>
<para>二维数组的列数 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="63" column="1" bodyfile="Matrix.h" bodystart="63" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a48235b1779b4da6de594768aba4b82f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int size</definition>
        <argsstring>(void)</argsstring>
        <name>size</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>取矩阵大小 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>返回说明 返回矩阵大小Row*Column </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="78" column="1" bodyfile="Matrix.h" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a7f2be31d0e91641a27d5237a0530a79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void PutElement</definition>
        <argsstring>(type Data, int Row, int Column)</argsstring>
        <name>PutElement</name>
        <param>
          <type>type</type>
          <declname>Data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Column</declname>
        </param>
        <briefdescription>
<para>将矩阵中的一个元素替换 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Data</parametername>
</parameternamelist>
<parameterdescription>
<para>欲放入矩阵的变量 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Row</parametername>
</parameternamelist>
<parameterdescription>
<para>放入的行数 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Column</parametername>
</parameternamelist>
<parameterdescription>
<para>放入的列数 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="88" column="1" bodyfile="Matrix.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a84e4a6f2b8203b46ab711db59a5e442c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>type</type>
        <definition>type GetElement</definition>
        <argsstring>(int Row, int Column)</argsstring>
        <name>GetElement</name>
        <param>
          <type>int</type>
          <declname>Row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Column</declname>
        </param>
        <briefdescription>
<para>得到矩阵的某个元素 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Row</parametername>
</parameternamelist>
<parameterdescription>
<para>矩阵行数 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Column</parametername>
</parameternamelist>
<parameterdescription>
<para>矩阵列数</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>返回说明 错误时抛出异常0x40 返回mat的Row行Column列元素 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="101" column="1" bodyfile="Matrix.h" bodystart="101" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1ac5e4ceeed105d65144d0f79ac2ce26dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>type</type>
        <definition>type GetRowLength</definition>
        <argsstring>(void)</argsstring>
        <name>GetRowLength</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>得到矩阵的行数 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>返回说明 返回矩阵的行数 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="113" column="1" bodyfile="Matrix.h" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a29ac1d0a5b4adf9480b35caecd50d780" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>type</type>
        <definition>type GetColumnLength</definition>
        <argsstring>(void)</argsstring>
        <name>GetColumnLength</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>得到矩阵的列数 </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>返回说明 返回矩阵的列数 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="123" column="1" bodyfile="Matrix.h" bodystart="123" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a7a7502617f07ad58542e147f2866a511" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>matrix</definition>
        <argsstring>(int Row, int Column)</argsstring>
        <name>matrix</name>
        <param>
          <type>int</type>
          <declname>Row</declname>
        </param>
        <param>
          <type>int</type>
          <declname>Column</declname>
        </param>
        <briefdescription>
<para>析构函数 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Row</parametername>
</parameternamelist>
<parameterdescription>
<para>初始化矩阵行数 </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Column</parametername>
</parameternamelist>
<parameterdescription>
<para>初始化矩阵列数 </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="133" column="1" bodyfile="Matrix.h" bodystart="133" bodyend="141"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1ae9a05b5c113a5308a055747c4ccb4a6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>type</type>
        <definition>type operator^</definition>
        <argsstring>(type A, type B)</argsstring>
        <name>operator^</name>
        <param>
          <type>type</type>
          <declname>A</declname>
        </param>
        <param>
          <type>type</type>
          <declname>B</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="144" column="1" bodyfile="Matrix.h" bodystart="144" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a00f9f0d5bdfe77c1e463555227d78476" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
        <definition>matrix&lt;type&gt; operator+</definition>
        <argsstring>(matrix&lt; type &gt; A, matrix&lt; type &gt; B)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>矩阵加法 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>两个被操作的矩阵 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>返回说明 错误时抛出异常0x41 返回它们的和 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="164" column="1" bodyfile="Matrix.h" bodystart="164" bodyend="181"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a2b89ffee6fd71e478c3e888c0395d3e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
        <definition>matrix&lt;type&gt; operator-</definition>
        <argsstring>(matrix&lt; type &gt; A, matrix&lt; tpye &gt; B)</argsstring>
        <name>operator-</name>
        <param>
          <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; tpye &gt;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>矩阵减法 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>两个被操作的矩阵 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>返回说明 错误时抛出异常0x42 返回它们的差 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="190" column="1" bodyfile="Matrix.h" bodystart="190" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="_matrix_8h_1a87f86488851b0aad894082bcb9145582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
        <definition>matrix&lt;type&gt; operator*</definition>
        <argsstring>(matrix&lt; type &gt; A, matrix&lt; tpye &gt; B)</argsstring>
        <name>operator*</name>
        <param>
          <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; type &gt;</type>
          <declname>A</declname>
        </param>
        <param>
          <type><ref refid="classmatrix" kindref="compound">matrix</ref>&lt; tpye &gt;</type>
          <declname>B</declname>
        </param>
        <briefdescription>
<para>矩阵乘法 </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>A</parametername>
<parametername>B</parametername>
</parameternamelist>
<parameterdescription>
<para>两个被操作的矩阵 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>返回说明 错误时抛出异常0x43 返回它们的积 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Matrix.h" line="216" column="1" bodyfile="Matrix.h" bodystart="216" bodyend="228"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*****************************************************************************</highlight></codeline>
<codeline lineno="2"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="3"><highlight class="comment">*<sp/><sp/>@file<sp/><sp/><sp/><sp/><sp/>Matrix.h<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment">*<sp/><sp/>@brief<sp/><sp/><sp/><sp/>矩阵类的丑陋实现<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment">*<sp/><sp/>Details.<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment">*<sp/><sp/>@author<sp/><sp/><sp/>Mike<sp/>Liu<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="8"><highlight class="comment">*<sp/><sp/>@email<sp/><sp/><sp/><sp/>mike_server@foxmail.com<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment">*<sp/><sp/>@version<sp/><sp/>1.0.0.0(版本号)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="10"><highlight class="comment">*<sp/><sp/>@date<sp/><sp/><sp/><sp/><sp/>2018.8.31<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment">*<sp/><sp/>@license<sp/><sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>(GPL)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="13"><highlight class="comment">*----------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="14"><highlight class="comment">*<sp/><sp/>Remark<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>None<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="15"><highlight class="comment">*----------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="16"><highlight class="comment">*<sp/><sp/>Change<sp/>History<sp/>:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment">*<sp/><sp/>&lt;Date&gt;<sp/><sp/><sp/><sp/><sp/>|<sp/>&lt;Version&gt;<sp/>|<sp/>&lt;Author&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>&lt;Description&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment">*----------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="19"><highlight class="comment">*<sp/><sp/>2018/08/31<sp/>|<sp/>1.0.0.0<sp/><sp/><sp/>|<sp/>Mike<sp/>Liu<sp/><sp/><sp/><sp/><sp/><sp/><sp/>|<sp/>Doxygen<sp/>test<sp/>ver<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="20"><highlight class="comment">*----------------------------------------------------------------------------*</highlight></codeline>
<codeline lineno="21"><highlight class="comment">*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight></codeline>
<codeline lineno="22"><highlight class="comment">*****************************************************************************/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_GLIBCXX_VECTOR</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_LIBLHY_MATRIX_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_LIBLHY_MATRIX_<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type&gt;</highlight></codeline>
<codeline lineno="33" refid="classmatrix" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classmatrix" kindref="compound">matrix</ref></highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Y;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vector&lt;<sp/>vector&lt;<sp/>type<sp/>&gt;<sp/>&gt;<sp/>mat;</highlight></codeline>
<codeline lineno="39"><highlight class="normal">}</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintFormat()</highlight></codeline>
<codeline lineno="45"><highlight class="normal">{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_GLIBCXX_IOSTREAM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#include&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;X;<sp/>i++)</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;Y;<sp/>j++)</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j!=Y?std::cout&lt;&lt;mat[i][j]&lt;&lt;</highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">:std::cout&lt;&lt;mat[i][j];</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutArray(type<sp/>**Array,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Row,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Column)</highlight></codeline>
<codeline lineno="64"><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;Row;<sp/>i++)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;Column;<sp/>j++)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[i][j]=*((</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*)Array<sp/>+<sp/>Column*i<sp/>+<sp/>j);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="79"><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;X<sp/>*this-&gt;Y;</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PutElement(type<sp/>Data,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Row,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Column)</highlight></codeline>
<codeline lineno="89"><highlight class="normal">{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>mat[Row][Column]=Data;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal">type<sp/>GetElement(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Row,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Column)</highlight></codeline>
<codeline lineno="102"><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((Row&gt;=X||Column&gt;=Y)||(Row&lt;0||Column&lt;0))</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>threw<sp/>0x40;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mat[Row][Column];</highlight></codeline>
<codeline lineno="106"><highlight class="normal">}</highlight></codeline>
<codeline lineno="113"><highlight class="normal">type<sp/>GetRowLength(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="114"><highlight class="normal">{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>X;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">}</highlight></codeline>
<codeline lineno="123"><highlight class="normal">type<sp/>GetColumnLength(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="124"><highlight class="normal">{</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Y;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><ref refid="classmatrix" kindref="compound">matrix</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Row,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Column)</highlight></codeline>
<codeline lineno="134"><highlight class="normal">{</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>mat.resize(Row);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;row;<sp/>i++)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mat[i].resize(Column);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>X=Row;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>Y=Column;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal">}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type**<sp/>getNomal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal">};</highlight></codeline>
<codeline lineno="144"><highlight class="normal">type<sp/>operator^(type<sp/>A,<sp/>type<sp/>B)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Ans<sp/>=<sp/>1,<sp/>Base<sp/>=<sp/>A;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(B<sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(B<sp/>&amp;<sp/>1)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ans<sp/>*=<sp/>Base;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Base<sp/>*=<sp/>Base;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>B<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ans;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">};</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>operator+<sp/>(<ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>A,<ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>B)</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>C(A.GetRowLength(),A.GetColumnLength());</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(A.GetColumnLength()==B.GetColumnLength()&amp;&amp;A.GetRowLength()==B.GetRowLength())</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;A.GetColumnLength()<sp/>;<sp/>i++)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;A.GetColumnLength()<sp/>;<sp/>j++)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.PutElement(A.GetElement(i,j)+B.GetElement(i,j),i,j);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>The<sp/>matrix<sp/>being<sp/>manipulated<sp/>is<sp/>not<sp/>a<sp/>matrix<sp/>of<sp/>the<sp/>same<sp/>type.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0x41;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal">}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>operator-<sp/>(<ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>A,<ref refid="classmatrix" kindref="compound">matrix&lt;tpye&gt;</ref><sp/>B)</highlight></codeline>
<codeline lineno="191"><highlight class="normal">{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>C(A.GetRowLength(),A.GetColumnLength());</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(A.GetColumnLength()==B.GetColumnLength()&amp;&amp;A.GetRowLength()==B.GetRowLength())</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;A.GetColumnLength()<sp/>;<sp/>i++)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j=0;<sp/>j&lt;A.GetColumnLength()<sp/>;<sp/>j++)</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.PutElement(A.GetElement(i,j)-B.GetElement(i,j),i,j);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout&lt;&lt;std::endl&lt;&lt;</highlight><highlight class="stringliteral">&quot;Error<sp/>:<sp/>The<sp/>matrix<sp/>being<sp/>manipulated<sp/>is<sp/>not<sp/>a<sp/>matrix<sp/>of<sp/>the<sp/>same<sp/>type.&quot;</highlight><highlight class="normal">&lt;&lt;std::endl&lt;&lt;std::endl;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>0x42;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal">}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>operator*<sp/>(<ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>A,<ref refid="classmatrix" kindref="compound">matrix&lt;tpye&gt;</ref><sp/>B)</highlight></codeline>
<codeline lineno="217"><highlight class="normal">{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classmatrix" kindref="compound">matrix&lt;type&gt;</ref><sp/>C;<sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>m=0;m&lt;A.GetRowLength();m++){<sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>s=0;s&lt;B.GetColumnLength();s++){<sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.PutElement(0,m,s);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n=0;n&lt;B.GetColumnLength();n++){<sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>C.PutElement(C.GetElement(m,s)+A.GetElement(m,n)*B.GetElement(n,s),m,s);<sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>C;</highlight></codeline>
<codeline lineno="228"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="Matrix.h"/>
  </compounddef>
</doxygen>
